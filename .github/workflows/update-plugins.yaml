name: "Update plugins"

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1' # Runs weekly on monday at 00:00

jobs:
  update-plugins:
    name: Update plugins
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v19
      - name: Update plugins
        id: update
        run: |
          echo "Updating start.json..."
          start_output=$(nix run nixpkgs#npins -- --lock-file start.json update --full 2>&1)
          echo "Updating opt.json..."
          opt_output=$(nix run nixpkgs#npins -- --lock-file opt.json update --full 2>&1)

          full_output="$start_output"$'\n'"$opt_output"
          echo "Full npins output:"
          echo "$full_output"

          changed_plugins=$(echo "$full_output" | grep -B1 "Changes:" | grep -o '\[.*\]' | tr -d '[]' || true)
          no_change_plugins=$(echo "$full_output" | grep "No Changes" | grep -o '\[.*\]' | tr -d '[]' || true)

          if [[ -n "$changed_plugins" ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT

            changes_detail=""

            echo "$full_output" | awk '
            /^\[.*\] Changes:/ {
              plugin = $0
              gsub(/^\[/, "", plugin)
              gsub(/\] Changes:/, "", plugin)
              print "PLUGIN:" plugin
              next
            }
            /^-.*version:/ {
              gsub(/^-.*version: /, "", $0)
              print "OLD_VERSION:" $0
              next
            }
            /^\+.*version:/ {
              gsub(/^\+.*version: /, "", $0)
              print "NEW_VERSION:" $0
              next
            }
            /^-.*revision:/ {
              gsub(/^-.*revision: /, "", $0)
              print "OLD_REVISION:" substr($0, 1, 8)
              next
            }
            /^\+.*revision:/ {
              gsub(/^\+.*revision: /, "", $0)
              print "NEW_REVISION:" substr($0, 1, 8)
              next
            }
            /^-.*hash:/ {
              gsub(/^-.*hash: /, "", $0)
              print "OLD_HASH:" substr($0, 1, 12)
              next
            }
            /^\+.*hash:/ {
              gsub(/^\+.*hash: /, "", $0)
              print "NEW_HASH:" substr($0, 1, 12)
              next
            }
            /^Updated/ || /^\[.*\] No Changes/ {
              if (plugin) {
                print "END_PLUGIN"
                plugin = ""
              }
            }' > /tmp/parsed_changes

            current_plugin=""
            old_version=""
            new_version=""
            old_revision=""
            new_revision=""
            old_hash=""
            new_hash=""

            while IFS=: read -r key value; do
              case $key in
                "PLUGIN")
                  current_plugin="$value"
                  ;;
                "OLD_VERSION")
                  old_version="$value"
                  ;;
                "NEW_VERSION")
                  new_version="$value"
                  ;;
                "OLD_REVISION")
                  old_revision="$value"
                  ;;
                "NEW_REVISION")
                  new_revision="$value"
                  ;;
                "OLD_HASH")
                  old_hash="$value"
                  ;;
                "NEW_HASH")
                  new_hash="$value"
                  ;;
                "END_PLUGIN")
                  if [[ -n "$current_plugin" ]]; then
                    changes_detail+="- $current_plugin: "

                    if [[ -n "$old_version" && -n "$new_version" ]]; then
                      changes_detail+="$old_version → $new_version"$'\n'
                    else
                      changes_detail+="updated to latest revision"$'\n'
                    fi

                    if [[ -n "$old_revision" && -n "$new_revision" ]]; then
                      changes_detail+="  - revision: $old_revision → $new_revision"$'\n'
                    fi

                    if [[ -n "$old_hash" && -n "$new_hash" ]]; then
                      changes_detail+="  - hash: $old_hash → $new_hash"$'\n'
                    fi

                    # Reset variables
                    current_plugin=""
                    old_version=""
                    new_version=""
                    old_revision=""
                    new_revision=""
                    old_hash=""
                    new_hash=""
                  fi
                  ;;
              esac
            done < /tmp/parsed_changes

            if [[ -n "$current_plugin" ]]; then
              changes_detail+="- $current_plugin: "

              if [[ -n "$old_version" && -n "$new_version" ]]; then
                changes_detail+="$old_version → $new_version"$'\n'
              else
                changes_detail+="updated to latest revision"$'\n'
              fi

              if [[ -n "$old_revision" && -n "$new_revision" ]]; then
                changes_detail+="  - revision: $old_revision → $new_revision"$'\n'
              fi

              if [[ -n "$old_hash" && -n "$new_hash" ]]; then
                changes_detail+="  - hash: $old_hash → $new_hash"$'\n'
              fi
            fi

            plugin_count=$(echo "$changed_plugins" | wc -w)
            if [[ $plugin_count -eq 1 ]]; then
              title="feat: update $changed_plugins plugin"
            else
              title="feat: update plugins"
            fi

            commit_body="Updates:"$'\n'"$changes_detail"

            if [[ -n "$no_change_plugins" ]]; then
              commit_body+=$'\n'"No changes required for:"$'\n'
              echo "$no_change_plugins" | while read -r plugin; do
                commit_body+="- $plugin"$'\n'
              done
            fi

            commit_body+=$'\n'"This update was automatically generated by the update-plugins workflow."

            echo "title=$title" >> $GITHUB_OUTPUT
            {
              echo "commit_body<<EOF"
              echo "$commit_body"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No plugin updates available. Skipping PR creation."
          fi

      - name: Create pull request
        if: steps.update.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          assignees: HeitorAugustoLN
          branch: update-plugins
          delete-branch: true
          labels: dependencies
          reviewers: HeitorAugustoLN
          sign-commits: true
          commit-message: |
            ${{ steps.update.outputs.title }}

            ${{ steps.update.outputs.commit_body }}
          title: ${{ steps.update.outputs.title }}
          body: |
            Automated plugin updates from npins.

            ${{ steps.update.outputs.commit_body }}
