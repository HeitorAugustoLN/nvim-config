name: "Update plugins"

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1' # Runs weekly on monday at 00:00

jobs:
  update-plugins:
    name: Update plugins
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v19
      - name: Update plugins
        id: update
        run: |
          echo "Updating start.json..."
          start_output=$(nix run nixpkgs#npins -- --lock-file start.json update --full 2>&1)
          echo "Updating opt.json..."
          opt_output=$(nix run nixpkgs#npins -- --lock-file opt.json update --full 2>&1)

          full_output="$start_output"$'\n'"$opt_output"
          echo "Full npins output:"
          echo "$full_output"

          if ! echo "$full_output" | grep -q "Changes:"; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No plugin updates available. Skipping PR creation."
            exit 0
          fi

          echo "has_changes=true" >> $GITHUB_OUTPUT

          changes_detail=""
          no_change_plugins=""
          changed_plugins_list=""

          current_plugin=""
          in_changes=false
          old_version=""
          new_version=""
          old_revision=""
          new_revision=""

          while IFS= read -r line; do
            if [[ $line =~ ^\[([^\]]+)\]\ Changes: ]]; then
              current_plugin="${BASH_REMATCH[1]}"
              in_changes=true
              changed_plugins_list+="$current_plugin "
              continue
            fi

            if [[ $line =~ ^\[([^\]]+)\]\ No\ Changes ]]; then
              no_change_plugins+="- ${BASH_REMATCH[1]}"$'\n'
              continue
            fi

            if [[ $in_changes == true && -n $current_plugin ]]; then
              if [[ $line =~ ^-.*version:\ (.+) ]]; then
                old_version="${BASH_REMATCH[1]}"
              elif [[ $line =~ ^\+.*version:\ (.+) ]]; then
                new_version="${BASH_REMATCH[1]}"
              elif [[ $line =~ ^-.*revision:\ (.+) ]]; then
                old_revision="${BASH_REMATCH[1]:0:8}"
              elif [[ $line =~ ^\+.*revision:\ (.+) ]]; then
                new_revision="${BASH_REMATCH[1]:0:8}"
              elif [[ $line =~ ^Updated.*pins ]] || [[ $line =~ ^\[.*\] ]]; then
                if [[ -n $current_plugin ]]; then
                  changes_detail+="- $current_plugin: "

                  if [[ -n $old_version && -n $new_version ]]; then
                    changes_detail+="$old_version → $new_version"$'\n'
                  else
                    changes_detail+="updated to latest revision"$'\n'
                  fi

                  if [[ -n $old_revision && -n $new_revision ]]; then
                    changes_detail+="  - revision: $old_revision → $new_revision"$'\n'
                  fi
                fi

                current_plugin=""
                in_changes=false
                old_version=""
                new_version=""
                old_revision=""
                new_revision=""
              fi
            fi
          done <<< "$full_output"

          if [[ $in_changes == true && -n $current_plugin ]]; then
            changes_detail+="- $current_plugin: "

            if [[ -n $old_version && -n $new_version ]]; then
              changes_detail+="$old_version → $new_version"$'\n'
            else
              changes_detail+="updated to latest revision"$'\n'
            fi

            if [[ -n $old_revision && -n $new_revision ]]; then
              changes_detail+="  - revision: $old_revision → $new_revision"$'\n'
            fi
          fi

          plugin_count=$(echo "$changed_plugins_list" | wc -w)
          if [[ $plugin_count -eq 1 ]]; then
            title="feat: update $(echo "$changed_plugins_list" | xargs) plugin"
          else
            title="feat: update plugins"
          fi

          commit_body="Updates:"$'\n'"$changes_detail"

          if [[ -n $no_change_plugins ]]; then
            commit_body+=$'\n'"No changes required for:"$'\n'"$no_change_plugins"
          fi

          commit_body+=$'\n'"This update was automatically generated by the update-plugins workflow."

          echo "title=$title" >> $GITHUB_OUTPUT
          {
            echo "commit_body<<EOF"
            echo "$commit_body"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create pull request
        if: steps.update.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          assignees: HeitorAugustoLN
          branch: update-plugins
          delete-branch: true
          labels: dependencies
          reviewers: HeitorAugustoLN
          sign-commits: true
          commit-message: |
            ${{ steps.update.outputs.title }}

            ${{ steps.update.outputs.commit_body }}
          title: ${{ steps.update.outputs.title }}
          body: |
            Automated plugin updates from npins.

            ${{ steps.update.outputs.commit_body }}
