name: "Update plug"

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1' # Runs weekly on monday at 00:00

jobs:
  update-plugins:
    name: Update plugins
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v19
      - name: Update plugins
        id: update
        run: |
          echo "Updating start.json..."
          start_output=$(nix run nixpkgs#npins -- --lock-file start.json update --full 2>&1)
          echo "Updating opt.json..."
          opt_output=$(nix run nixpkgs#npins -- --lock-file opt.json update --full 2>&1)

          full_output="$start_output"$'\n'"$opt_output"
          echo "Full npins output:"
          echo "$full_output"

          changed_plugins=$(echo "$full_output" | grep -B1 "Changes:" | grep -o '\[.*\]' | tr -d '[]' | paste -sd ',' - || true)
          no_change_plugins=$(echo "$full_output" | grep "No Changes" | grep -o '\[.*\]' | tr -d '[]' || true)

          if [[ -n "$changed_plugins" ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT

            changes_detail=""
            while IFS= read -r line; do
              if [[ $line =~ \[(.*)\].*Changes: ]]; then
                plugin_name="${BASH_REMATCH[1]}"
                changes_detail+="- $plugin_name: "

                version_change=$(echo "$full_output" | sed -n "/\[$plugin_name\]/,/Updated/p" | grep "version:" || true)
                if [[ -n "$version_change" ]]; then
                  old_version=$(echo "$version_change" | grep "^-" | sed 's/.*version: //')
                  new_version=$(echo "$version_change" | grep "^+" | sed 's/.*version: //')
                  changes_detail+="$old_version → $new_version"$'\n'
                else
                  changes_detail+="updated to latest revision"$'\n'
                fi

                revision_change=$(echo "$full_output" | sed -n "/\[$plugin_name\]/,/Updated/p" | grep "revision:")
                if [[ -n "$revision_change" ]]; then
                  old_rev=$(echo "$revision_change" | grep "^-" | sed 's/.*revision: //' | cut -c1-8)
                  new_rev=$(echo "$revision_change" | grep "^+" | sed 's/.*revision: //' | cut -c1-8)
                  changes_detail+="  - revision: $old_rev → $new_rev"$'\n'
                fi

                hash_change=$(echo "$full_output" | sed -n "/\[$plugin_name\]/,/Updated/p" | grep "hash:")
                if [[ -n "$hash_change" ]]; then
                  old_hash=$(echo "$hash_change" | grep "^-" | sed 's/.*hash: //' | cut -c1-12)
                  new_hash=$(echo "$hash_change" | grep "^+" | sed 's/.*hash: //' | cut -c1-12)
                  changes_detail+="  - hash: $old_hash → $new_hash"$'\n'
                fi
              fi
            done <<< "$(echo "$full_output" | grep "Changes:")"

            plugin_count=$(echo "$changed_plugins" | tr ',' '\n' | wc -l)
            if [[ $plugin_count -eq 1 ]]; then
              title="feat: update $changed_plugins plugin"
            else
              title="feat: update plugins"
            fi

            commit_body="Updates:"$'\n'"$changes_detail"

            if [[ -n "$no_change_plugins" ]]; then
              commit_body+=$'\n'"No changes required for:"$'\n'
              while IFS= read -r plugin; do
                commit_body+="- $plugin"$'\n'
              done <<< "$no_change_plugins"
            fi

            commit_body+=$'\n'"This update was automatically generated by the update-plugins workflow."

            echo "title=$title" >> $GITHUB_OUTPUT
            {
              echo "commit_body<<EOF"
              echo "$commit_body"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No plugin updates available. Skipping PR creation."
          fi

      - name: Create pull request
        if: steps.update.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          assignees: HeitorAugustoLN
          body: |
            Automated plugin updates from npins.

            ${{ steps.update.outputs.commit_body }}
          commit-message: |
            ${{ steps.update.outputs.title }}

            ${{ steps.update.outputs.commit_body }}
          branch: update-plugins
          delete-branch: true
          labels: dependencies
          reviewers: HeitorAugustoLN
          sign-commits: true
          title: ${{ steps.update.outputs.title }}
